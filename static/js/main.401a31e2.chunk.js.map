{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ToDoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","console","log","target","value","setState","currentTodo","addItem","state","todos","preventDefault","concat","toConsumableArray","deleteItem","index","newTodo","filter","el","idx","_this2","react_default","a","createElement","className","onSubmit","htmlFor","onChange","name","type","placeholder","map","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LA2EeA,qBAtEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,aAAe,SAAAC,GACbC,QAAQC,IAAIF,EAAMG,OAAOC,OACzBZ,EAAKa,SAAU,CACbC,YAAcN,EAAMG,OAAOC,SAXjBZ,EAede,QAAU,SAAAP,GACRC,QAAQC,IAAI,iBAAiBV,EAAKgB,MAAMF,aACxCL,QAAQC,IAAI,oDAAqDV,EAAKgB,MAAMC,OAC5ET,EAAMU,iBACNlB,EAAKa,SAAU,CACbI,MAAK,GAAAE,OAAAlB,OAAAmB,EAAA,EAAAnB,CAAOD,EAAKgB,MAAMC,OAAlB,CAAyBjB,EAAKgB,MAAMF,gBAO3CL,QAAQC,IAAI,iDAAkDV,EAAKgB,MAAMC,QA3B7DjB,EA8BdqB,WAAa,SAAAC,GACXb,QAAQC,IAAI,qBACZD,QAAQC,IAAI,mCAAmCY,GAC/C,IAAIC,EAAUvB,EAAKgB,MAAMC,MAAMO,OAAO,SAACC,EAAIC,GAAL,OAAaA,IAAQJ,IAQ3DtB,EAAKa,SAAU,CACbI,MAAQM,KAxCVvB,EAAKgB,MAAQ,CACXC,MAAO,CAAC,QAAS,OAAQ,SACzBH,YAAa,IAJHd,wEA+CL,IAAA2B,EAAAxB,KACP,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAME,SAAU7B,KAAKY,SAArB,KACEa,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,YAAf,eACAL,EAAAC,EAAAC,cAAA,SAAOI,SAAU/B,KAAKI,aAAc4B,KAAK,WAAWC,KAAK,OAAOC,YAAY,qBAC5ET,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,aAEFR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAK3B,KAAKa,MAAMC,MAAMqB,IAAI,SAACb,EAAIH,GAC7B,OAAOM,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQM,KAAK,SAASG,QAAS,kBAAMZ,EAAKN,WAAWC,KAArD,UAAJ,IAAkFG,eA3D9Ee,cCQHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.401a31e2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { arrayExpression } from '@babel/types';\n// import TaskList from './TaskList'\n\nclass ToDoList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [\"Dance\", \"Jump\", \"Sleep\"],\n      currentTodo: \"\",\n    }\n  }\n\n  handleChange = event => {\n    console.log(event.target.value) // returns each character put in\n    this.setState ({\n      currentTodo : event.target.value, //change value of currentTodo to characters put in\n    })\n  }\n\n  addItem = event => {\n    console.log(\"currentTodo is\",this.state.currentTodo)\n    console.log(\"before event added to todo array, todos arrray is\", this.state.todos)\n    event.preventDefault();\n    this.setState ({\n      todos : [...this.state.todos, this.state.currentTodo] //\n      // Syntax is [..array, elementToAdd]\n      // ..array creates a copy of the array\n      // elementToAdd is added \n      // [] square brackets to tell ...spread operator that the context is an array, because spread works differently with strings and objects\n      // ...spread in arrays makes a copy. ...spread as a function works same as apply method\n    })\n    console.log(\"event added to todo array, now todos arrray is\", this.state.todos)\n  }\n\n  deleteItem = index => {\n    console.log(\"deletedItem fired\")\n    console.log(\"deleteItem's arguement, index is\",index) // returns the index of the item we want to delete from the todos array\n    let newTodo = this.state.todos.filter((el, idx) => idx !== index)// returns a new array with everything BUT event  \n    // console.log(el) returns each element of the todos array. combined with map function, deletes all items from list\n    // console.log(idx) returns the index of each element of the todos array. combined with map function, deletes all items from list\n    // console.log(index) returns the index of the element we want to delete from the todos array.\n    // don't do anything to el? just writing it to get to the second argument of the filter argument\n    // array.filter(function(currentValue, index))\n    // array.filter((currentValue, index) => function)\n    // filter's return value: A new array with the elements that pass the test. If no elements pass the test, an empty array will be returned.\n    this.setState ({\n      todos : newTodo\n    })\n    // remove from array, using spread? filter?\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <form onSubmit={this.addItem}>  {/* addItem and handleChange don't needs argument because event is default argument */}\n          <label htmlFor=\"taskName\">Task Name: </label>\n          <input onChange={this.handleChange} name=\"taskName\" type=\"text\" placeholder=\"Add a todo here!\" />\n          <button type=\"submit\">Add task</button>\n        </form>\n        <div className=\"list-of-todos\">\n          <h1>What to do today</h1>\n          <ul>{this.state.todos.map((el, index) => {\n            return <li><button type=\"button\" onClick={() => this.deleteItem(index)}>delete</button> {el}</li> // switches between JS and JSX\n          })} \n          {/* event is a class? event.target tell sus \"<button type=\"text\">Delete</button>\" */}\n          {/* HTML attributes are like props */}\n          {/* why empty argument after onClick? why does deleteItem have an argument while the other functions in the render don't? */}\n          </ul>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default ToDoList;\n\n// onChange={() => this.handleChange()} same as onChange={this.handleChange}\n\n// Notes and from previous attempts\n\n// addEvent function\n  // console.log(\"in addItem function, event is\", event) // returns SyntheticEvent\n  // console.log(\"in addItem function, event.target is\", event.target) //returns <form>...</form> JSX element\n  // console.log(\"in addItem function, event.target.value is\", event.target.value) // returns undefined\n  // console.log(\"current this.state.todos is\", this.state.todos) // returns empty array\n// this.setState ({\n//   todos : this.state.todos.push(this.state.currentTodo) // after 1st time, todos value becomes an interger (length of new array), and then cannot push on an interger\n// })\n// this.state.todos.push(this.state.currentTodo) DO NOT change state outside of setState. push changes original state\n\n// Notes from trying to list todos\n{/* map() method creates a new array with the results of calling a function for every array element. */}\n{/* <li>{this.state.todos}</li> displays the array*/}\n{/* <li>{this.state.todos[0]}</li> displays the first element in the array */}\n{/* hard-code to display first 3 elements of the array */}\n{/* <li>{this.state.todos[0]}</li>\n<li>{this.state.todos[1]}</li>\n<li>{this.state.todos[2]}</li> */}\n{/* iterate through array to display each element */}\n{/* <li>{this.state.todos[i]}</li> */}\n// displayTodos = event => {\n//   for (let i=0 ; i<this.state.todos.length ; i++) {\n//     let currentTodo = this.state.todos[i]\n//     console.log(currentTodo)\n//   }\n// }\n\n// deleteItem\n// let newList = this.state.todos.filter(el => {\n  // el !== event}\n  // ) DOESN'T WORK, because if has {}, needs a return statement\n// let newList = this.state.todos.filter(el => el !== event) WORKS\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}